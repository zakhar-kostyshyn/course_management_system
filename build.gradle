plugins {
    id 'org.springframework.boot' version '2.6.3'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id "co.uzzu.dotenv.gradle" version "1.2.0"
    id 'org.liquibase.gradle' version '2.1.0'
    id 'nu.studer.jooq' version '6.0.1'
    id "com.avast.gradle.docker-compose" version "0.16.4"
}


group = 'com.sombra'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'



configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

test {
    useJUnitPlatform()
}

dependencies {

    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.liquibase:liquibase-core:4.10.0'
    implementation 'org.springframework.boot:spring-boot-starter-jooq'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springdoc:springdoc-openapi-ui:1.6.8'
    implementation 'com.auth0:java-jwt:4.0.0'

    compileOnly 'org.projectlombok:lombok'

    annotationProcessor 'org.projectlombok:lombok'

    runtimeOnly 'org.postgresql:postgresql'

    testImplementation 'io.rest-assured:rest-assured:5.1.1'
    testImplementation 'io.rest-assured:xml-path:5.1.1'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.hamcrest:hamcrest:2.2'
    testImplementation 'org.springframework.security:spring-security-oauth2-jose:5.7.2'

    liquibaseRuntime 'org.liquibase:liquibase-core:4.10.0'
    liquibaseRuntime 'info.picocli:picocli:4.6.3'
    liquibaseRuntime 'org.postgresql:postgresql'

    jooqGenerator 'org.postgresql:postgresql:42.3.2'
}

var activeProfile = System.getenv('SPRING_PROFILES_ACTIVE')
String databaseUrl
if (activeProfile == 'container') {
    databaseUrl = 'jdbc:postgresql://cms_db:5432/cms_db'
} else {
    databaseUrl = 'jdbc:postgresql://localhost:5433/cms_db'
}

dockerCompose {
    database {
        useComposeFiles = ['docker-compose-build.yml']
    }
}

jooq {
    configurations {
        main {
            generationTool {
                jdbc {
                    driver = 'org.postgresql.Driver'
                    url = databaseUrl
                    user = 'root'
                    password = 'root'
                }
                generator {
                    name = 'org.jooq.codegen.DefaultGenerator'
                    database {
                        name = 'org.jooq.meta.postgres.PostgresDatabase'
                        inputSchema = 'public'
                        includes = '.*'
                        logSlowQueriesAfterSeconds = 20
                        excludes = ''' databasechangelog | databasechangeloglock '''
                    }
                    generate {
                        daos = true
                        validationAnnotations = true
                        springAnnotations = true
                    }
                    target {
                        packageName = 'com.sombra.promotion'
                        directory = 'build/generated-src/jooq/main'
                }
                    strategy.name = 'org.jooq.codegen.DefaultGeneratorStrategy'
                }
            }
        }
    }
}

liquibase {
    activities {
        main {
            changeLogFile 'src/main/resources/liquibase/main_changelog.xml'
            url databaseUrl
            username 'root'
            password 'root'
        }
    }
}

if (activeProfile == 'container') {
    generateJooq.dependsOn update
    test.dependsOn generateJooq
} else {
    update.dependsOn databaseComposeUp
    generateJooq.dependsOn update
    test.dependsOn generateJooq
    tasks.named("build") { finalizedBy(databaseComposeDown) }
    bootRun.dependsOn databaseComposeDown
}
